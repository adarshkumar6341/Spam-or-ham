{"cells":[{"cell_type":"markdown","metadata":{"id":"h_FMBJlA3S9l"},"source":["We, Adarsh Kumar (DSTC-22/23-002) and Sourav Ghosh (DSTC-22/23-016), hereby declare that this report, titled **\"Spam or Ham? Identifying and Filtering Unwanted Emails using Bayesian Analysis\"**, based on the dataset available at [Spam Mails Dataset](https://www.kaggle.com/datasets/venky73/spam-mails-dataset), has been submitted to the Indian Statistical Institute, Chennai, as part of the requirements for the Postgraduate Diploma in Statistical Methods and Analytics in the [Department Name]. This is our original work carried out under the supervision of Dr. Sampangi Raman, and it has not been submitted as part of any degree or diploma in this or any other institution or university. We have endeavored to maintain academic integrity and honesty throughout. Any external information, statements, or results used in this report have been properly acknowledged and cited.\n","\n","Chennai  \n","Adarsh Kumar  \n","Sourav Ghosh"]},{"cell_type":"code","source":["! pip install -q kaggle"],"metadata":{"id":"ZqkEvc0IuJXX","executionInfo":{"status":"ok","timestamp":1728838479238,"user_tz":-330,"elapsed":4663,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"id":"1iFRsNSvuJN-","outputId":"3d78e349-80a3-4ab9-bfb4-dbcdbc3de3b6","executionInfo":{"status":"ok","timestamp":1728838518444,"user_tz":-330,"elapsed":39213,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9d402671-f27a-4e85-bfb4-13c825e480ea\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9d402671-f27a-4e85-bfb4-13c825e480ea\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n"]},{"output_type":"execute_result","data":{"text/plain":["{'kaggle.json': b'{\"username\":\"adarshkumar6341\",\"key\":\"1f67f1ce14ddd1717a2134bb97da8306\"}'}"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"ZaEx9t1tz0PS","executionInfo":{"status":"ok","timestamp":1728838523460,"user_tz":-330,"elapsed":540,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["! mkdir ~/.kaggle\n","! cp kaggle.json ~/.kaggle/\n","! chmod 600 ~/.kaggle/kaggle.json"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"r19jlLLV0NZ1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728838530118,"user_tz":-330,"elapsed":3482,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"3fe10d45-e2f0-44cd-9f3b-b4bb145c98c1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset URL: https://www.kaggle.com/datasets/venky73/spam-mails-dataset\n","License(s): CC0-1.0\n","Downloading spam-mails-dataset.zip to /content\n","  0% 0.00/1.86M [00:00<?, ?B/s]\n","100% 1.86M/1.86M [00:00<00:00, 105MB/s]\n"]}],"source":["!kaggle datasets download -d venky73/spam-mails-dataset"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"JqMkSzQv1fev","executionInfo":{"status":"ok","timestamp":1728838532631,"user_tz":-330,"elapsed":467,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["import zipfile\n","zip_ref = zipfile.ZipFile('/content/spam-mails-dataset.zip', 'r')\n","zip_ref.extractall('/content')\n","zip_ref.close()\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"pyYOrlAA1odY","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1728838535136,"user_tz":-330,"elapsed":890,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"82bf07a2-11c8-4496-8476-8f5ba91ec395"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Label                                               Text\n","NaN     label                                               text\n","605.0     ham  Subject: enron methanol ; meter # : 988291\\r\\n...\n","2349.0    ham  Subject: hpl nom for january 9 , 2001\\r\\n( see...\n","3624.0    ham  Subject: neon retreat\\r\\nho ho ho , we ' re ar...\n","4685.0   spam  Subject: photoshop , windows , office . cheap ...\n","...       ...                                                ...\n","1518.0    ham  Subject: put the 10 on the ft\\r\\nthe transport...\n","404.0     ham  Subject: 3 / 4 / 2000 and following noms\\r\\nhp...\n","2933.0    ham  Subject: calpine daily gas nomination\\r\\n>\\r\\n...\n","1409.0    ham  Subject: industrial worksheets for august 2000...\n","4807.0   spam  Subject: important online banking alert\\r\\ndea...\n","\n","[5171 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-2e27fa80-419e-479e-8fff-db1b9d9e7cc7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>NaN</th>\n","      <td>label</td>\n","      <td>text</td>\n","    </tr>\n","    <tr>\n","      <th>605.0</th>\n","      <td>ham</td>\n","      <td>Subject: enron methanol ; meter # : 988291\\r\\n...</td>\n","    </tr>\n","    <tr>\n","      <th>2349.0</th>\n","      <td>ham</td>\n","      <td>Subject: hpl nom for january 9 , 2001\\r\\n( see...</td>\n","    </tr>\n","    <tr>\n","      <th>3624.0</th>\n","      <td>ham</td>\n","      <td>Subject: neon retreat\\r\\nho ho ho , we ' re ar...</td>\n","    </tr>\n","    <tr>\n","      <th>4685.0</th>\n","      <td>spam</td>\n","      <td>Subject: photoshop , windows , office . cheap ...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1518.0</th>\n","      <td>ham</td>\n","      <td>Subject: put the 10 on the ft\\r\\nthe transport...</td>\n","    </tr>\n","    <tr>\n","      <th>404.0</th>\n","      <td>ham</td>\n","      <td>Subject: 3 / 4 / 2000 and following noms\\r\\nhp...</td>\n","    </tr>\n","    <tr>\n","      <th>2933.0</th>\n","      <td>ham</td>\n","      <td>Subject: calpine daily gas nomination\\r\\n&gt;\\r\\n...</td>\n","    </tr>\n","    <tr>\n","      <th>1409.0</th>\n","      <td>ham</td>\n","      <td>Subject: industrial worksheets for august 2000...</td>\n","    </tr>\n","    <tr>\n","      <th>4807.0</th>\n","      <td>spam</td>\n","      <td>Subject: important online banking alert\\r\\ndea...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5171 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e27fa80-419e-479e-8fff-db1b9d9e7cc7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2e27fa80-419e-479e-8fff-db1b9d9e7cc7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2e27fa80-419e-479e-8fff-db1b9d9e7cc7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-29fe9942-d161-4e4d-8e8f-0a28a9b72b7f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29fe9942-d161-4e4d-8e8f-0a28a9b72b7f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-29fe9942-d161-4e4d-8e8f-0a28a9b72b7f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9b467983-5165-4d1c-819b-c989cf874c7f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9b467983-5165-4d1c-819b-c989cf874c7f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5171,\n  \"fields\": [\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"label\",\n          \"ham\",\n          \"spam\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4993,\n        \"samples\": [\n          \"Subject: hpl / conoco - teco waha 03 / 23 / 01 purchase\\r\\ndaren , conoco invoiced hpl at $ 5 . 87 for 03 / 23 at pgev / waha and deal ticket 685350 shows $ 4 . 87 . can you confirm the price ? thanks .\",\n          \"Subject: holiday on - call data\\r\\npipeline contact phone fax pager\\r\\nblack marlin blair lichentwalter 713 853 - 7367 713 646 - 3201 ( h )\\r\\n281 370 - 1866\\r\\ndebbie thompson 713 853 - 3144 713 646 - 3201\\r\\n( noms due today for 23 rd through 27 th )\\r\\nchannel jim tobacco 713 420 - 2159\\r\\ngas control 1 505 599 - 2333\\r\\n( open thursday . noms will be due through monday )\\r\\ncentana william spekels 713 627 - 6290 713 762 - 3450\\r\\ndonna spencer 713 627 - 6255\\r\\ngas control 1 888 204 - 1718\\r\\n( noms due today for 23 rd through 27 th )\\r\\nduke energy annette anderson 713 260 - 8603 713 949 - 3026\\r\\n( on call ) bob moseman 713 - 260 - 8698 ( thursday )\\r\\nopen tomorrow - noms will be due thru the 27 th )\\r\\nlonestar gary gafford 214 670 - 2674 214 875 - 3810\\r\\ngas control 214 875 - 2455 or 2456\\r\\n( noms due today , 23 rd thru 27 th )\\r\\nnorthern natural ben markey 853 - 7581 cell 713 446 - 9404 800 931 - 0398\\r\\n( on call ) charlie mosey 853 - 1520\\r\\ngas control 853 -\\r\\n( open thursday - noms due thru 27 th . )\\r\\neast trans - east texas\\r\\ntejas gas control 713 767 - 5366\\r\\npaula svehla 713 230 - 3569\\r\\nmickey chapman 713 230 - 3546\\r\\n( open thursday - noms due thru 27 th )\\r\\nmidcon ( y 2 k ) ken nachlinger 713 369 - 9284 713 369 - 9375 888 733 - 5954\\r\\n( on call ) steven 888 790 - 0255\\r\\n( y 2 k ) don 888 733 - 4602\\r\\ngas control 713 369 - 9200\\r\\n( noms due today , 23 rd thru 27 th )\\r\\nmoss bluff no current business\",\n          \"Subject: gas day 2 / 08 / 01\\r\\nwe agree :\\r\\nteco tap nom = 40 . 000 ; actual 41 . 358\\r\\n- - - - - - - - - - - - - - - - - - - - - - forwarded by melissa jones / texas utilities on\\r\\n02 / 09 / 2001\\r\\n10 : 15 am - - - - - - - - - - - - - - - - - - - - - - - - - - -\\r\\nkponton @ duke - energy . com on 02 / 09 / 2001 09 : 15 : 35 am\\r\\nto : david avila / lsp / enserch / us @ tu , charlie stone / texas utilities @ tu , melissa\\r\\njones / texas utilities @ tu\\r\\ncc :\\r\\nsubject : gas day 2 / 08 / 01\\r\\nnom = 40 , 000 mmbtu ' s\\r\\nactual flow = 39 , 959 mcf , 41 , 358 mmbtu ' s\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["import random\n","import re\n","import pandas as pd\n","\n","df=pd.read_csv(\"/content/spam_ham_dataset.csv\", header=None, names=['Label', 'Text','tag'])\n","df = df.drop('tag', axis=1)\n","df = df.drop(0)\n","df"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"CEtLwiQOwYLy","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1728838537549,"user_tz":-330,"elapsed":467,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"2b84abed-7a11-47ef-e882-5c819188cb48"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Label                                               Text\n","0      ham  Subject: enron methanol ; meter # : 988291\\r\\n...\n","1      ham  Subject: hpl nom for january 9 , 2001\\r\\n( see...\n","2      ham  Subject: neon retreat\\r\\nho ho ho , we ' re ar...\n","3     spam  Subject: photoshop , windows , office . cheap ...\n","4      ham  Subject: re : indian springs\\r\\nthis deal is t...\n","...    ...                                                ...\n","5165   ham  Subject: put the 10 on the ft\\r\\nthe transport...\n","5166   ham  Subject: 3 / 4 / 2000 and following noms\\r\\nhp...\n","5167   ham  Subject: calpine daily gas nomination\\r\\n>\\r\\n...\n","5168   ham  Subject: industrial worksheets for august 2000...\n","5169  spam  Subject: important online banking alert\\r\\ndea...\n","\n","[5170 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-0ac172f1-85aa-459c-a3e7-8f45445e526d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ham</td>\n","      <td>Subject: enron methanol ; meter # : 988291\\r\\n...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ham</td>\n","      <td>Subject: hpl nom for january 9 , 2001\\r\\n( see...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ham</td>\n","      <td>Subject: neon retreat\\r\\nho ho ho , we ' re ar...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>spam</td>\n","      <td>Subject: photoshop , windows , office . cheap ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ham</td>\n","      <td>Subject: re : indian springs\\r\\nthis deal is t...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5165</th>\n","      <td>ham</td>\n","      <td>Subject: put the 10 on the ft\\r\\nthe transport...</td>\n","    </tr>\n","    <tr>\n","      <th>5166</th>\n","      <td>ham</td>\n","      <td>Subject: 3 / 4 / 2000 and following noms\\r\\nhp...</td>\n","    </tr>\n","    <tr>\n","      <th>5167</th>\n","      <td>ham</td>\n","      <td>Subject: calpine daily gas nomination\\r\\n&gt;\\r\\n...</td>\n","    </tr>\n","    <tr>\n","      <th>5168</th>\n","      <td>ham</td>\n","      <td>Subject: industrial worksheets for august 2000...</td>\n","    </tr>\n","    <tr>\n","      <th>5169</th>\n","      <td>spam</td>\n","      <td>Subject: important online banking alert\\r\\ndea...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5170 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ac172f1-85aa-459c-a3e7-8f45445e526d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0ac172f1-85aa-459c-a3e7-8f45445e526d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0ac172f1-85aa-459c-a3e7-8f45445e526d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3c7176be-2bba-46e2-a801-91342973248c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c7176be-2bba-46e2-a801-91342973248c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3c7176be-2bba-46e2-a801-91342973248c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1391a606-bb78-44e9-8452-fd6cdb041a4a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1391a606-bb78-44e9-8452-fd6cdb041a4a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5170,\n  \"fields\": [\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"spam\",\n          \"ham\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4992,\n        \"samples\": [\n          \"Subject: indian springs\\r\\ni need hpl sales and purchases , back dated to 8 / 99 between hpl and teco to\\r\\nbook any processing revenue or losses . apparently this is in addition to the\\r\\ncurrent deal in place and is priced at at different rate . please let me know\\r\\nwhen these tickets are in place so that i can get track id ' s and finalize\\r\\nthis issue .\\r\\nthank you ,\\r\\nmary\",\n          \"Subject: hpl nom for december 21 , 2000\\r\\n( see attached file : hplnl 221 . xls )\\r\\n- hplnl 221 . xls\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}],"source":["\n","df = df.iloc[1:]\n","df = df.reset_index(drop=True)\n","df"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"26GfR_7ZW7E9","colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"status":"ok","timestamp":1728838539163,"user_tz":-330,"elapsed":4,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"6284ac09-d410-4b3a-a01f-0e870c565d5e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"Subject: shell houston open\\r\\nfirst come first serve :\\r\\ni have :\\r\\n10 shell houston open badges available . ( let ' s try to share these as best we\\r\\ncan . )\\r\\n10 one day passes\\r\\n2 invitations to tonights mardi gras party\\r\\n4 tickets to this saturday ' s beauty n blues concert .\\r\\nthis might be a good time to remind you that this week is secretary ' s week\\r\\n( since i am holding all the goodies ) just joking brenda .\\r\\nyvette\\r\\nx 3 . 5953\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}],"source":["df.iloc[random.randint(0,len(df)+1),1]"]},{"cell_type":"markdown","metadata":{"id":"VzhUkLgA1dlK"},"source":["**Data cleaning**\n","\n","Data cleaning is the process of identifying and correcting or removing errors, inconsistencies, and inaccuracies in data. We do data cleaning for several reasons:\n","\n","\n","1. Improve Data Quality: Data cleaning helps to improve the quality of data by removing errors, inconsistencies, and inaccuracies that can affect the analysis and decision-making process.\n","\n","2. Ensure Consistency: Data cleaning ensures that the data is consistent across different sources and formats. This is important when merging or aggregating data from different sources.\n","\n","3. Remove Duplicates: Data cleaning helps to identify and remove duplicate records or observations. This is important for data analysis, as duplicates can skew the results and affect the accuracy of statistical models.\n","\n","4. Handle Missing Data: Data cleaning helps to handle missing data by imputing values or removing observations with missing data. This is important as missing data can affect the accuracy of statistical models and data analysis.\n","\n","\n","5.\n","Ensure Data Validity: Data cleaning ensures that the data is valid by checking for outliers and extreme values. This is important for data analysis, as outliers can skew the results and affect the accuracy of statistical models.\n","\n","\n","6. Overall, data cleaning is important for ensuring that data is accurate, consistent, and valid, which is essential for effective data analysis and decision-making.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"V0MZhFJ14tpm"},"source":["In order to classify a new message as spam or ham using our multinomial Naive Bayes algorithm, we need to calculate the probabilities of the message being spam or ham given the words in the message. To do this, we use a set of equations that involve calculating the probabilities of each word in the message given that the message is spam or ham. However, before we can perform these calculations, we need to clean the data to bring it into a format that is suitable for analysis.\n","\n","The original format of our training and test sets consists of a column of messages, where each message is a string of words. To calculate the necessary probabilities, we need to transform this data into a format where each row corresponds to a single message and each column represents a unique word from the vocabulary. The vocabulary is the set of unique words that appear in all of the messages.\n","\n","During this transformation, we replace the original SMS column with a series of new columns representing the unique words in the vocabulary. We also convert all the words to lowercase and remove any punctuation. This transformation allows us to easily extract information about the occurrence of each word in each message and use it to calculate the necessary probabilities for our Naive Bayes algorithm.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"zzs5XrZV5Jc5"},"source":["Bayes' Theorem is a mathematical formula that calculates the probability of an event based on prior knowledge of conditions that might be related to the event. In the context of text classification, we can use Bayes' Theorem to calculate the probability that a given message belongs to a particular class (such as spam or ham) based on the probability of observing certain words in the message.\n","\n","In Python, the formula for Bayes' Theorem can be written as:\n","\n","P(class|message) = P(message|class) * P(class) / P(message)\n","\n","where:\n","\n","P(class|message) is the probability that the message belongs to the given class, given the words in the message\n","P(message|class) is the probability of observing the words in the message, given the class\n","P(class) is the prior probability of the class (i.e., the overall probability that a message belongs to that class)\n","P(message) is the overall probability of observing the message (this factor is usually ignored since it is constant for all classes)\n","To use this formula in text classification, we first calculate the values of P(message|class) and P(class) for each class using our training data. Then, given a new message, we can calculate the value of P(class|message) for each class using the above formula and choose the class with the highest probability as the predicted class for the message.\n"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"WsQ44jXahtaC","executionInfo":{"status":"ok","timestamp":1728838541708,"user_tz":-330,"elapsed":667,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["def remove_digits(sentence):\n","    pattern = r'\\d+'\n","    return re.sub(pattern, '', sentence)\n","\n","def remove_chars(string):\n","    remove = ['\\r', '\\n', ':', ',','.',';']\n","    return string.translate(str.maketrans('', '', ''.join(remove)))\n","\n","def remove_special_chars(sentence):\n","    pattern = r'[^a-zA-Z0-9\\s]'\n","    return re.sub(pattern, '', sentence)\n","\n","def remove_long_spaces(sentence):\n","    words = sentence.split()                        # split the sentence into words\n","    clean_words = [word for word in words if word]  # remove empty words\n","    return \" \".join(clean_words)\n","\n","def convert_labels(labels):\n","    new_labels = []\n","    for label in labels:\n","        if label == 'spam':\n","            new_labels.append(2)\n","        else:\n","            new_labels.append(0)\n","    return new_labels\n","\n","def remove_single_letters(sentence):\n","    words = sentence.split()                   # split the sentence into words\n","    clean_words = [word for word in words if len(word) > 1]  # remove single-letter words\n","    return \" \".join(clean_words)              # join the remaining words into a sentence\n","\n","\n"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"HdShv10IUIem","executionInfo":{"status":"ok","timestamp":1728838541708,"user_tz":-330,"elapsed":1,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"vbwua8BjUIAE"},"source":[]},{"cell_type":"code","execution_count":10,"metadata":{"id":"lmSR6JuTgIkl","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1728838543275,"user_tz":-330,"elapsed":918,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"4f063604-8dae-47c8-9a16-cf546c6b19be"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Label                                               Text\n","310       1  subject pimpwear royal replicas rr have you ev...\n","1981      0  subject re daren just call me mike how about t...\n","3482      1  subject message subject think getting rate is ...\n","1894      0  subject decrease entex rom dth by days dth by ...\n","493       0  subject re intraday eastrans nomination change..."],"text/html":["\n","  <div id=\"df-071d98dc-b644-4a3a-b755-08c96b7bd361\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>310</th>\n","      <td>1</td>\n","      <td>subject pimpwear royal replicas rr have you ev...</td>\n","    </tr>\n","    <tr>\n","      <th>1981</th>\n","      <td>0</td>\n","      <td>subject re daren just call me mike how about t...</td>\n","    </tr>\n","    <tr>\n","      <th>3482</th>\n","      <td>1</td>\n","      <td>subject message subject think getting rate is ...</td>\n","    </tr>\n","    <tr>\n","      <th>1894</th>\n","      <td>0</td>\n","      <td>subject decrease entex rom dth by days dth by ...</td>\n","    </tr>\n","    <tr>\n","      <th>493</th>\n","      <td>0</td>\n","      <td>subject re intraday eastrans nomination change...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-071d98dc-b644-4a3a-b755-08c96b7bd361')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-071d98dc-b644-4a3a-b755-08c96b7bd361 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-071d98dc-b644-4a3a-b755-08c96b7bd361');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2687dae6-6b0c-4d42-b78f-7aa5103985a9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2687dae6-6b0c-4d42-b78f-7aa5103985a9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2687dae6-6b0c-4d42-b78f-7aa5103985a9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"subject re daren just call me mike how about thursday the th at let plan on hour can you locate conference room mike original message from daren farmer mailto dfarmer ect enron com sent friday february pm to mam teamlead com subject michael or mike what do you like to be called my schedule is open thursday afternoon pm and friday pm let me know the what works best for you earlier in the afternoon is usually best for me daren\",\n          \"subject re intraday eastrans nomination change for will be delivered to mobil beaumont from cipco for th only marta henderson am to darrel bane easttexas pefs pec pec john bretz gcs cec pec pec chad cass gcs cec pec pec michael cherry easttexas pefs pec pec bruce mcmills ftworth pefs pec pec william speckels gcs cec pec pec donna spencer gcs cec pec pec julia urbanek gcs cec pec pec dora levy gcs cec pec pec briley enron com dfarmer enron com carlos rodriguez enron com sharon beemer ftworth pefs pec pec connie wester easttexas pefs pec pec cc subject intraday eastrans nomination change for deliveries continue to be\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}],"source":["df[\"Label\"] = df[\"Label\"].apply(lambda x: 1 if \"spam\" in x.lower() else 0)\n","df[\"Text\"]=df[\"Text\"].apply(remove_digits)\n","df[\"Text\"]=df[\"Text\"].apply(remove_long_spaces)\n","df[\"Text\"]=df[\"Text\"].apply(remove_chars)\n","df[\"Text\"]=df[\"Text\"].apply(remove_special_chars)\n","df['Text']=df['Text'].str.lower()\n","df['Text']=df['Text'].apply(remove_single_letters)\n","df.sample(5)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"U5ZKsrlkmQVN","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1728838543276,"user_tz":-330,"elapsed":4,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"23474816-cf00-4ff3-c0ae-e2e03eaa359a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'subject re vacation will leave the choice to you all we just need to make sure there is coverage have good one daren farmer am to brenda herod hou ect ect cc subject vacation bh plan to be on vacation july finally and on the customer trip on the th while am out gary hanks will be keeping our position during trading stacey will be in charge of everything else am comfortable that everything will be covered will be back in town thursday night the primary flight for the customer trip leaves around others leave at and the latest idea we had is that pat would take later flight on this trip and will take later flight on the august trip allowing one of us to be in the office for half the day can also come in for the half day on the th if we decide that is needed'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}],"source":["df.iloc[random.randint(0,len(df)+1),1]"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"nbl_sICoy6Il","colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"status":"ok","timestamp":1728838543276,"user_tz":-330,"elapsed":4,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"9791e643-097b-435e-acb0-042fe509c82e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Text                                                               \n","      count unique                                                top freq\n","Label                                                                     \n","0      3671   3175  subject hpl nom for march see attached file hp...   31\n","1      1499   1460                                            subject   18"],"text/html":["\n","  <div id=\"df-27af90bd-298f-4bcd-83ed-9b0df8b5f08c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Text</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>count</th>\n","      <th>unique</th>\n","      <th>top</th>\n","      <th>freq</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3671</td>\n","      <td>3175</td>\n","      <td>subject hpl nom for march see attached file hp...</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1499</td>\n","      <td>1460</td>\n","      <td>subject</td>\n","      <td>18</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27af90bd-298f-4bcd-83ed-9b0df8b5f08c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-27af90bd-298f-4bcd-83ed-9b0df8b5f08c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-27af90bd-298f-4bcd-83ed-9b0df8b5f08c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3144ee1c-04ac-486d-bf3d-c0b091174803\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3144ee1c-04ac-486d-bf3d-c0b091174803')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3144ee1c-04ac-486d-bf3d-c0b091174803 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Label\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Text\",\n        \"count\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1499\",\n        \"max\": \"3671\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"1499\",\n          \"3671\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Text\",\n        \"unique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1460,\n        \"max\": 3175,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1460,\n          3175\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Text\",\n        \"top\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"subject\",\n          \"subject hpl nom for march see attached file hplno xls hplno xls\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Text\",\n        \"freq\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"18\",\n        \"max\": \"31\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"18\",\n          \"31\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}],"source":["df.groupby('Label').describe()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"nFru53gIiyeS","colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"status":"ok","timestamp":1728838543951,"user_tz":-330,"elapsed":6,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"4bfc38e9-bdce-4b11-f669-0536de6f8d3e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Label\n","0    0.710058\n","1    0.289942\n","Name: proportion, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>proportion</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.710058</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.289942</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":13}],"source":["df['Label'].value_counts(normalize=True)"]},{"cell_type":"markdown","metadata":{"id":"VKbSXerN25OE"},"source":["**Data visualization**\n","\n","\n","Data visualization is an important step in the process of filtering spam data because it allows us to better understand the data and identify patterns and trends.\n","\n","Spam filtering involves classifying incoming messages as either spam or non-spam (also known as \"ham\"). Data visualization can help us to visualize the features that distinguish spam messages from non-spam messages, such as the frequency of certain words or phrases, the length of the message, and the presence of certain types of attachments or links.\n","\n","By visualizing these features using graphs, charts, and other visualizations, we can gain insights into the characteristics of spam messages and identify features that are useful for classification. For example, we might create a histogram of the word frequencies in the spam messages and compare it to a histogram of the word frequencies in the non-spam messages. This could help us to identify words or phrases that are more common in spam messages than in non-spam messages.\n","\n","Data visualization also helps to communicate the results of our analysis to others. By creating visualizations that effectively communicate our findings, we can share our insights with stakeholders and make data-driven decisions about how to improve our spam filtering algorithms."]},{"cell_type":"code","execution_count":14,"metadata":{"id":"ar_l7f0sxaUs","colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1728838543952,"user_tz":-330,"elapsed":6,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"681ca815-015f-4f09-e246-17285cd0d186"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","# Count the number of spam and ham messages\n","spam_count = df[df['Label'] == 1]['Label'].count()\n","ham_count = df[df['Label'] == 0]['Label'].count()\n","\n","# Set the figure size\n","fig = plt.figure(figsize=(10, 6))  # Adjust the width and height as desired\n","\n","# Create a bar chart of the message counts\n","labels = ['Spam', 'Ham']\n","counts = [spam_count, ham_count]\n","plt.bar(labels, counts)\n","plt.title('Spam/Ham Message Counts')\n","plt.xlabel('Message Type')\n","plt.ylabel('Count')\n","plt.show()\n"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"3QOBnPukt-SH","executionInfo":{"status":"ok","timestamp":1728838545341,"user_tz":-330,"elapsed":1394,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","# Splitting the data into training and testing sets\n","X_train, X_test = train_test_split(df , test_size=0.4, random_state=42)"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"e6SpKf6EXyt5","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1728838545341,"user_tz":-330,"elapsed":4,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"2965c38b-4c33-4a61-8664-4273a84a26d6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Label                                               Text\n","1566      0  subject enron actuals for april estimated actu...\n","1988      0  subject natural gas nomination for enron metha...\n","1235      1  subject learn to save on medications at discou...\n","2868      0  subject re correction to nominations for eastr...\n","3435      1  subject imageplus ink toner and ribbon cartrid...\n","...     ...                                                ...\n","958       0  subject reliant energy entex transport imbalan...\n","1793      0  subject re united oil minerals inc chapman uni...\n","331       1  subject paliourg super offers for meedication ...\n","2523      1  subject it not joke tail need often which mean...\n","2942      0  subject re remaining ua meter variances last o...\n","\n","[2068 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-7d4aa91d-f3a8-4c27-b56e-c5d241867f42\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1566</th>\n","      <td>0</td>\n","      <td>subject enron actuals for april estimated actu...</td>\n","    </tr>\n","    <tr>\n","      <th>1988</th>\n","      <td>0</td>\n","      <td>subject natural gas nomination for enron metha...</td>\n","    </tr>\n","    <tr>\n","      <th>1235</th>\n","      <td>1</td>\n","      <td>subject learn to save on medications at discou...</td>\n","    </tr>\n","    <tr>\n","      <th>2868</th>\n","      <td>0</td>\n","      <td>subject re correction to nominations for eastr...</td>\n","    </tr>\n","    <tr>\n","      <th>3435</th>\n","      <td>1</td>\n","      <td>subject imageplus ink toner and ribbon cartrid...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>0</td>\n","      <td>subject reliant energy entex transport imbalan...</td>\n","    </tr>\n","    <tr>\n","      <th>1793</th>\n","      <td>0</td>\n","      <td>subject re united oil minerals inc chapman uni...</td>\n","    </tr>\n","    <tr>\n","      <th>331</th>\n","      <td>1</td>\n","      <td>subject paliourg super offers for meedication ...</td>\n","    </tr>\n","    <tr>\n","      <th>2523</th>\n","      <td>1</td>\n","      <td>subject it not joke tail need often which mean...</td>\n","    </tr>\n","    <tr>\n","      <th>2942</th>\n","      <td>0</td>\n","      <td>subject re remaining ua meter variances last o...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2068 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d4aa91d-f3a8-4c27-b56e-c5d241867f42')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7d4aa91d-f3a8-4c27-b56e-c5d241867f42 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7d4aa91d-f3a8-4c27-b56e-c5d241867f42');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-82fc1d04-6391-4985-818a-e1386effe201\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82fc1d04-6391-4985-818a-e1386effe201')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-82fc1d04-6391-4985-818a-e1386effe201 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7c962b1f-b5e1-4e7c-b0b7-1af93c9875c7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7c962b1f-b5e1-4e7c-b0b7-1af93c9875c7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test","summary":"{\n  \"name\": \"X_test\",\n  \"rows\": 2068,\n  \"fields\": [\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1936,\n        \"samples\": [\n          \"subject christmas lunch texas logistics the texas logistics desk has reservation at the stables at main and greenbriar for wed the th at am for our christmas luncheon we are planning on having christmas gift fight at some point during the lunch so please plan on bringing present net present value of this is alot of fun so hope to see everyone there we will arrange some carpooling on tuesday or wednesday am if you can take four or more with you please let me know thank you mary\",\n          \"subject enron hpl actuals for august august teco tap hpl iferc enron ls hpl lsk ic enron august teco tap hpl iferc enron ls hpl lsk ic enron august teco tap hpl iferc enron\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}],"source":["X_test"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"ky57D5q9XyCt","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1728838545341,"user_tz":-330,"elapsed":3,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"27c03234-146e-4de5-9153-d0402682739f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Label                                               Text\n","2369      1  subject my discovery finally have always worri...\n","1774      0  subject july production estimate daren fyi bob...\n","4749      0  subject hpl nom for april see attached file hp...\n","4758      1  subject re info you requested wo lt gen john s...\n","3972      0  subject revision eastrans nomination change ef...\n","...     ...                                                ...\n","4426      0  subject re deal daren thu has asked if can ext...\n","466       0  subject tenaska iv bob understand from sandi t...\n","3092      1  subject fwd here all meds ana vlagr fiori term...\n","3772      0  subject fw candle lighting original message fr...\n","860       0  subject re and yes it is gtc spot daren farmer...\n","\n","[3102 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-ca423848-9a47-417c-a6ba-c07a3873cac8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2369</th>\n","      <td>1</td>\n","      <td>subject my discovery finally have always worri...</td>\n","    </tr>\n","    <tr>\n","      <th>1774</th>\n","      <td>0</td>\n","      <td>subject july production estimate daren fyi bob...</td>\n","    </tr>\n","    <tr>\n","      <th>4749</th>\n","      <td>0</td>\n","      <td>subject hpl nom for april see attached file hp...</td>\n","    </tr>\n","    <tr>\n","      <th>4758</th>\n","      <td>1</td>\n","      <td>subject re info you requested wo lt gen john s...</td>\n","    </tr>\n","    <tr>\n","      <th>3972</th>\n","      <td>0</td>\n","      <td>subject revision eastrans nomination change ef...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4426</th>\n","      <td>0</td>\n","      <td>subject re deal daren thu has asked if can ext...</td>\n","    </tr>\n","    <tr>\n","      <th>466</th>\n","      <td>0</td>\n","      <td>subject tenaska iv bob understand from sandi t...</td>\n","    </tr>\n","    <tr>\n","      <th>3092</th>\n","      <td>1</td>\n","      <td>subject fwd here all meds ana vlagr fiori term...</td>\n","    </tr>\n","    <tr>\n","      <th>3772</th>\n","      <td>0</td>\n","      <td>subject fw candle lighting original message fr...</td>\n","    </tr>\n","    <tr>\n","      <th>860</th>\n","      <td>0</td>\n","      <td>subject re and yes it is gtc spot daren farmer...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3102 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca423848-9a47-417c-a6ba-c07a3873cac8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ca423848-9a47-417c-a6ba-c07a3873cac8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ca423848-9a47-417c-a6ba-c07a3873cac8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1444ce03-111f-4a52-843b-8b89be79deb9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1444ce03-111f-4a52-843b-8b89be79deb9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1444ce03-111f-4a52-843b-8b89be79deb9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e6316dea-c150-49ce-b3b9-d72b4ef183e2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e6316dea-c150-49ce-b3b9-d72b4ef183e2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 3102,\n  \"fields\": [\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2849,\n        \"samples\": [\n          \"subject re howdy am doing well just got out here and am getting adjusted trying to meet new folks everyday even if it is at the corner coffee shop do feel free and haven thought about entex my friends have been welcoming have couple of friend out here that have winter house in tahoe and they have invited me to jon them for thanksgiving in tahoe ll probably ski little but just looking forward to curling up to book by the fireplace ope you are doing well miss you guys keep in touch ami daren farmer enron com wrote hey ac how are things going for you liking your new freedom wild girl hope your having fun sure missing you on entex already feeling the heat from tm with the cold spell and the change in weather forecasts have to re evaluate entex everyday but that the way it always is over here ve been meaning to mail you but always remember after leave the office anyway let me know how it going later do you yahoo yahoo calendar get organized for the holidays http calendar yahoo com\",\n          \"subject finally have big dick really lay the pipe to the next girl you screw http beebe aenetsell com um take off http besetting aenetsell com html siltation argue wither\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}],"source":["X_train"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"cHwbZuo6t-Pi","executionInfo":{"status":"ok","timestamp":1728838545341,"user_tz":-330,"elapsed":3,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["import math\n","import re\n","from collections import defaultdict\n","import pandas as pd\n","\n","class NaiveBayesClassifier:\n","    def __init__(self):\n","        self.word_counts = defaultdict(lambda: [0, 0])  # [spam_count, ham_count]\n","        self.total_spam = 0\n","        self.total_ham = 0\n","        self.spam_prior = 0.0\n","        self.ham_prior = 0.0\n","\n","    def train(self, training_data):\n","        for _, row in training_data.iterrows():\n","            text, label = row['Text'], row['Label']\n","            words = self.preprocess_text(text)\n","            for word in words:\n","                self.word_counts[word][label] += 1\n","                if label == 1:\n","                    self.total_spam += 1\n","                else:\n","                    self.total_ham += 1\n","\n","        total_messages = self.total_spam + self.total_ham\n","        self.spam_prior = self.total_spam / total_messages\n","        self.ham_prior = self.total_ham / total_messages\n","\n","    def classify(self, text):\n","        words = self.preprocess_text(text)\n","        spam_prob = math.log(self.spam_prior)\n","        ham_prob = math.log(self.ham_prior)\n","\n","        for word in words:\n","            word_data = self.word_counts[word]\n","            spam_prob += math.log((word_data[1] + 1) / (self.total_spam + len(self.word_counts)))\n","            ham_prob += math.log((word_data[0] + 1) / (self.total_ham + len(self.word_counts)))\n","\n","        return spam_prob > ham_prob\n","\n","    @staticmethod\n","    def preprocess_text(text):\n","        # Preprocess the text by converting to lowercase and extracting words\n","        words = re.findall(r'\\w+', text.lower())\n","        return words\n"]},{"cell_type":"markdown","source":["This code defines a class called NaiveBayesClassifier. The __init__ method is the class constructor where the initial values of various variables are set. The word_counts variable is a dictionary that stores the count of words in spam and ham messages. total_spam and total_ham keep track of the total number of spam and ham messages. spam_prior and ham_prior represent the prior probabilities of spam and ham messages, respectively.\n","\n","\n","The train method takes in the training data, which is expected to be a DataFrame with columns 'Text' and 'Label'. It iterates over each row of the training data, preprocesses the text using the preprocess_text method, and updates the word counts based on the label (spam or ham). It also keeps track of the total number of spam and ham messages. Finally, it calculates and stores the prior probabilities of spam and ham messages.\n","\n","The classify method takes a text as input, preprocesses it using the preprocess_text method, and then calculates the probability of the text being spam or ham using the Naive Bayes formula. The logarithm of the probabilities is used to avoid numerical underflow. The method iterates over each word in the preprocessed text and calculates the conditional probabilities based on the word counts. Finally, it returns a boolean value indicating whether the text is classified as spam (True) or ham (False).\n","\n","The preprocess_text method takes a text as input, converts it to lowercase, and extracts individual words using regular expression matching (re.findall). The extracted words are returned as a list."],"metadata":{"id":"eEqYbpilLvMG"}},{"cell_type":"code","execution_count":19,"metadata":{"id":"GCyM-XrJt-M6","executionInfo":{"status":"ok","timestamp":1728838545766,"user_tz":-330,"elapsed":427,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["# Create a NaiveBayesClassifier instance\n","classifier = NaiveBayesClassifier()\n","# Train the classifier\n","classifier.train(X_train)"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"Y26q5K-jjTkz","executionInfo":{"status":"ok","timestamp":1728838545766,"user_tz":-330,"elapsed":1,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":["def calculate_accuracy(model, test_data):\n","    total_examples = len(test_data)\n","    correct_predictions = 0\n","\n","    for _, row in test_data.iterrows():\n","        text, true_label = row['Text'], row['Label']\n","        predicted_label = model.classify(text)\n","\n","        if predicted_label == true_label:\n","            correct_predictions += 1\n","\n","    accuracy = correct_predictions / total_examples\n","    return accuracy\n"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"wRTpji-4uTH3","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1728838559064,"user_tz":-330,"elapsed":13299,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"6c496739-3db7-42d4-b3c4-93d8f0452bd0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","thresholds = [0.1, 0.2, 0.3, 0.4, 0.5,0.6,0.7,0.8,0.9,.99]  # Example thresholds\n","accuracies = []\n","\n","for threshold in thresholds:\n","    test_size = threshold  # Calculate test size based on the threshold\n","    X_train, X_test = train_test_split(df, test_size=test_size, random_state=42)\n","    classifier.train(X_train)\n","    accuracy = calculate_accuracy(classifier, X_test)\n","    accuracies.append(accuracy)\n","\n","# Plot the accuracy graph\n","plt.plot(thresholds, accuracies, marker='o')\n","plt.xlabel('Threshold')\n","plt.ylabel('Accuracy')\n","plt.title('Accuracy vs. Threshold')\n","plt.grid(True)\n","plt.show()\n"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"flw1PeTejSw9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728838560027,"user_tz":-330,"elapsed":968,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"aeb60134-8aa8-4291-9e6a-b17b4680966c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9888650126977926\n"]}],"source":["# Assuming you have trained the model and have a test dataset named 'test_data'\n","accuracy = calculate_accuracy(classifier, X_test)\n","print(\"Accuracy:\", accuracy)"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"S3lCBJMyt-KF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728838560027,"user_tz":-330,"elapsed":7,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"4d2c4027-f7aa-4037-f904-ea57caae8295"},"outputs":[{"output_type":"stream","name":"stdout","text":["The email 'offer!offer!offer' is classified as spam.\n"]}],"source":["# Test the classifier\n","email = \"offer!offer!offer\"\n","is_spam = classifier.classify(email)\n","\n","if is_spam:\n","    print(f\"The email '{email}' is classified as spam.\")\n","else:\n","    print(f\"The email '{email}' is classified as ham.\")\n"]},{"cell_type":"code","source":["# Test the classifier\n","email = \"”offer!offer!offer\"\n","is_spam = classifier.classify(email)\n","\n","if is_spam:\n","    print(f\"The email '{email}' is classified as spam.\")\n","else:\n","    print(f\"The email '{email}' is classified as ham.\")\n"],"metadata":{"id":"7g-W5HAfusKd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728838560028,"user_tz":-330,"elapsed":6,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}},"outputId":"bd436bd6-4f0a-473b-97a6-38f40538b672"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["The email '”offer!offer!offer' is classified as spam.\n"]}]},{"cell_type":"code","execution_count":25,"metadata":{"id":"PBAg4n7loBtX","executionInfo":{"status":"ok","timestamp":1728838560028,"user_tz":-330,"elapsed":5,"user":{"displayName":"ADARSH Kumar","userId":"03061616914505773424"}}},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}